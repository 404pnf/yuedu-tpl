// Generated by CoffeeScript 1.7.1
var YD, doWhen, hasBlank, note, postJson, redirectToUrl, renderLocalData, showStatusMsg, userBar;

YD = void 0;

YD = YD || {};

YD.debug = false;

showStatusMsg = showStatusMsg = function(data) {
  alert(data.error);
};

doWhen = doWhen = function(predict, action) {
  if (predict) {
    action();
  }
};

postJson = postJson = function(url, cssID, callback) {
  var formData, onFailure, onSuccess;
  formData = {
    data: $(cssID).serializeJSON()
  };
  note(formData);
  onSuccess = onSuccess = function(data) {
    if (_.has(data, "error")) {
      showStatusMsg(data);
    } else {
      callback();
    }
  };
  onFailure = onFailure = function(data, status, xhr) {
    showStatusMsg(data + " " + status + " " + xhr);
  };
  $.post(url, formData).done(onSuccess).fail(onFailure);
};

renderLocalData = renderLocalData = function(data, cssID, tpl, callback) {
  return function() {
    var cb, clonedData;
    cb = callback || _.identity;
    clonedData = _.snapshot(_.extend(data, YD.conf));
    new EJS({
      url: YD.conf.tplDir + tpl
    }).update(cssID, cb(clonedData));
  };
};

redirectToUrl = redirectToUrl = function(url) {
  window.location.replace(url);
};

note = note = function(msg) {
  if (YD.debug) {
    console.log(msg);
  }
};

hasBlank = hasBlank = function(arr) {
  var coll, isBlank;
  isBlank = isBlank = function(e) {
    return e === "";
  };
  coll = _.map(arr, isBlank);
  return _.reduce(coll, (function(a, e) {
    return a || e;
  }), false);
};

YD.user = function() {
  var userBarShow, userEdit, userInfoAll, userInfoAndPhoto, userPhotoEdit, userPhotoSave, userSave, userShow;
  userInfoAndPhoto = $.when($.ajax(userinfo), $.ajax(photos)).then(function(a, b) {
    var data;
    data = _.extend(a[0], b[0]);
    return data;
  });
  userInfoAll = $.when($.ajax(userinfo), $.ajax(grades), $.ajax(photos)).then(function(a, b, c) {
    var data;
    data = _.extend(a[0], b[0], c[0]);
    return data;
  });
  userShow = userShow = function() {
    userInfoAndPhoto.then(function(data) {
      new EJS({
        url: YD.conf.tplDir + "user_show.ejs"
      }).update("user_info", data);
    });
  };
  userBarShow = userBarShow = function() {
    userInfoAndPhoto.then(function(data) {
      new EJS({
        url: YD.conf.tplDir + "user_bar.ejs"
      }).update("user_bar", data);
    });
  };
  userEdit = userEdit = function() {
    userInfoAll.then(function(data) {
      new EJS({
        url: YD.conf.tplDir + "user_edit.ejs"
      }).update("user_info", data);
    });
  };
  userPhotoEdit = userPhotoEdit = function() {
    userInfoAndPhoto.then(function(data) {
      new EJS({
        url: YD.conf.tplDir + "user_photo_edit.ejs"
      }).update("user_info", data);
    });
  };
  userSave = userSave = function() {
    postJson(YD.conf.userSave, "form#user_info", function() {
      redirectToUrl(YD.conf.userHomeUrl);
    });
  };
  userPhotoSave = userPhotoSave = function() {
    postJson(YD.conf.userSave, "form#user_photo", function() {
      redirectToUrl(YD.conf.userHomeUrl);
    });
  };
  return (function() {
    userShow();
    userBarShow();
    $("#user_info").delegate("#user_info_edit", "click", userEdit);
    $("#user_info").delegate("#user_photo_edit", "click", userPhotoEdit);
    $("#user_info").delegate("#user_info_save", "click", userSave);
    $("#user_info").delegate("#user_photo_save", "click", userPhotoSave);
    $("#user_info").delegate("#user_cancel_edit", "click", function() {
      redirectToUrl(YD.conf.userHomeUrl);
    });
  })();
};

YD.userBar = userBar = function() {
  var photos, userInfoAndPhoto, userinfo;
  userinfo = YD.conf.userinfo;
  photos = YD.conf.photos;
  if (YD.userBarShow) {
    YD.userBarShow();
  } else {
    userInfoAndPhoto = $.when($.ajax(userinfo), $.ajax(photos)).then(function(a, b) {
      var d;
      d = _.extend(a[0], b[0]);
      return d;
    });
    userInfoAndPhoto.done(function(data) {
      new EJS({
        url: YD.conf.tplDir + "user_bar.ejs"
      }).update("user_bar", data);
    });
  }
};

YD.startDispache = function() {
  var next;
  next = next = function() {
    var getExamInfo, onFailure, onSuccess, promise;
    getExamInfo = $.get(YD.conf.getExamInfo);
    promise = getExamInfo.then(function(data) {
      var updateDateText;
      updateDateText = updateDateText = function(d) {
        var o;
        o = _.map(d.upcomingExam, function(e) {
          if (e.isTodayExam) {
            e.endTime = "";
            e.isTodayExam = "今天";
          } else {
            e.isTodayExam = "";
          }
          return e;
        });
        return {
          upcomingExam: o
        };
      };
      if (data.upcomingExam) {
        _.extend(data, updateDateText(data), {
          hasUpcoming: true
        });
        note(data);
      } else {
        _.extend(data, {
          hasUpcoming: false
        });
      }
      return data;
    });
    note(promise);
    onSuccess = onSuccess = function(data) {
      var TookNoExam, canTakeExam, canTakeExamNolatestExamResult, examInfo, hasResultCanNotRetake, hasResultCanRetake, hasResultCanRetakeContinue, hasUpcomingExam, noExamToTake, render;
      examInfo = _.snapshot(data);
      canTakeExam = _.has(examInfo, "currentExam") && examInfo.currentExam.userExamState !== "0" && !(_.has(examInfo, "latestExamResult"));
      canTakeExamNolatestExamResult = _.has(examInfo, "currentExam") && examInfo.currentExam.userExamState !== "0";
      TookNoExam = _.has(examInfo, "currentExam") && examInfo.currentExam.userExamState === "0" && !(_.has(examInfo, "latestExamResult"));
      hasUpcomingExam = _.has(examInfo, "upcomingExam") && !_.has(examInfo, "latestExamResult") && !_.has(examInfo, "currentExam");
      hasResultCanRetake = _.has(examInfo, "latestExamResult") && _.has(examInfo, "currentExam") && examInfo.currentExam.userExamState === "0";
      hasResultCanRetakeContinue = _.has(examInfo, "latestExamResult") && _.has(examInfo, "currentExam") && examInfo.currentExam.userExamState !== "0";
      hasResultCanNotRetake = _.has(examInfo, "latestExamResult") && !(_.has(examInfo, "currentExam"));
      noExamToTake = !_.has(examInfo, "currentExam") && !_.has(examInfo, "upcomingExam") && !_.has(examInfo, "latestExamResult");
      render = _.partial(renderLocalData, examInfo);
      promise.done(doWhen(canTakeExamNolatestExamResult, render("front_content", "start_current_continue.ejs")));
      promise.done(doWhen(canTakeExam, render("front_content", "start_current_continue.ejs")));
      promise.done(doWhen(TookNoExam, render("front_content", "start_current.ejs")));
      promise.done(doWhen(hasUpcomingExam, render("front_content", "start_upcoming.ejs")));
      promise.done(doWhen(hasResultCanRetake, render("front_content", "start_scores.ejs")));
      promise.done(doWhen(hasResultCanRetakeContinue, render("front_content", "start_current_continue.ejs")));
      promise.done(doWhen(hasResultCanNotRetake, render("front_content", "start_scores_cant_retake_exam.ejs")));
      promise.done(doWhen(noExamToTake, render("front_content", "start_scores_cant_retake_exam.ejs")));
    };
    onFailure = onFailure = function() {
      note("链接后台失败。");
    };
    promise.done(function(data) {
      YD.exam = YD.exam || data;
      note(YD.exam);
    });
    promise.fail(onFailure);
    promise.done(onSuccess);
    promise.done(function() {
      var shouldRetry;
      shouldRetry = !_.has(YD.exam, "currentExam") && _.has(YD.exam, "upcomingExam") && _.find(YD.exam.upcomingExam, function(e) {
        return e.isTodayExam;
      });
      if (shouldRetry) {
        note("满足刷新条件，页面将会刷新。 " + new Date());
        setTimeout(next, 180000);
      }
    });
  };
  setTimeout(next, 0);
};

YD.userLogin = function() {
  $("form").submit(function(e) {
    var name, password, yz;
    e.preventDefault();
    name = $("#username").val();
    password = $("#password").val();
    yz = $("#yz").val();
    if (hasBlank([name, password, yz])) {
      alert("所有输入框都必须填写。");
    } else {
      $("#password").val($.md5($("#password").val()));
      postJson(YD.conf.userLogin, "#login", function() {
        redirectToUrl(YD.conf.siteHomeUrl);
      });
    }
  });
};

YD.resetPass = function() {
  $("#reset_pass_save").click(function(e) {
    var dontMatch, newPass, newPassConfirm, oldPass;
    e.preventDefault();
    oldPass = $("#old_pass").val();
    newPass = $("#new_pass").val();
    newPassConfirm = $("#new_pass_confirm").val();
    dontMatch = newPass !== newPassConfirm;
    if (hasBlank([oldPass, newPass, newPassConfirm])) {
      alert("所有输入框都必须填写。");
    } else if (dontMatch) {
      alert("两次输入的新密码不匹配。");
    } else {
      $("#new_pass").val($.md5($("#new_pass").val()));
      $("#old_pass").val($.md5($("#old_pass").val()));
      $("#new_pass_confirm").val($.md5($("#new_pass_confirm").val()));
      postJson(YD.conf.userResetPass, "#reset_pass_form", function() {
        redirectToUrl(YD.conf.userHomeUrl);
      });
    }
  });
};

return;
