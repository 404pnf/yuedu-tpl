// Generated by CoffeeScript 1.8.0
(function() {
  var alertBox, doWhen, hasBlank, note, postJson, redirectToUrl, renderLocalData, root, showStatusMsg;

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.YD || (root.YD = {});

  YD.debug = false;

  showStatusMsg = function(data) {
    alertBox(data.error);
  };

  alertBox = function(msg) {
    $("#msg").text(msg);
    $("#msg").dialog({
      modal: true,
      buttons: {
        Ok: function() {
          return $(this).dialog("close");
        }
      }
    });
  };

  doWhen = function(predict, action) {
    if (predict) {
      return action;
    }
  };

  postJson = function(url, cssID, callback) {
    var formData, onFailure, onSuccess;
    formData = {
      data: $(cssID).serializeJSON()
    };
    note(formData);
    onSuccess = function(data) {
      if ("error" in data) {
        return showStatusMsg(data);
      } else {
        return callback();
      }
    };
    onFailure = function(data, status, xhr) {
      return showStatusMsg("" + data + ", " + status + ", " + xhr);
    };
    $.post(url, formData).done(onSuccess).fail(onFailure);
  };

  renderLocalData = function(data, cssID, tpl, callback) {
    (function() {
      var cb, clonedData;
      cb = callback || _.identity;
      clonedData = _.snapshot(_.extend(data, YD.conf));
      return new EJS({
        url: "" + YD.conf.tplDir + tpl
      }).update(cssID, cb(clonedData));
    });
  };

  redirectToUrl = function(url) {
    window.location.replace(url);
  };

  note = function(msg) {
    if (YD.debug) {
      console.log(msg);
    }
  };

  hasBlank = function(arr) {
    var coll, isBlank;
    isBlank = function(e) {
      return e === "";
    };
    coll = _.map(arr, isBlank);
    return _.reduce(coll, function(a, e) {
      return a || e;
    }, false);
  };

  YD.user = function() {
    var grades, photos, userBarShow, userEdit, userInfoAll, userPhotoEdit, userPhotoSave, userRender, userSave, userShow, userinfo;
    userinfo = YD.conf.userInfo;
    photos = YD.conf.photos;
    grades = YD.conf.grades;
    userInfoAll = $.when($.ajax(userinfo), $.ajax(grades), $.ajax(photos)).then(function(a, b, c) {
      return _.extend(a[0], b[0], c[0]);
    });
    userRender = function(tpl, cssID, data) {
      return new EJS({
        url: YD.conf.tplDir + tpl
      }).update(cssID, data);
    };
    userShow = function() {
      return userInfoAll.done(function(data) {
        return userRender("user_show.ejs", "user_info", data);
      });
    };
    userBarShow = function() {
      return userInfoAll.done(function(data) {
        return userRender("user_bar.ejs", "user_bar", data);
      });
    };
    userEdit = function() {
      return userInfoAll.done(function(data) {
        return userRender("user_edit.ejs", "user_info", data);
      });
    };
    userPhotoEdit = function() {
      return userInfoAll.done(function(data) {
        return userRender("user_photo_edit.ejs", "user_info", data);
      });
    };
    userSave = function() {
      return postJson(YD.conf.userSave, "form#user_info", function() {
        return redirectToUrl(YD.conf.userHomeUrl);
      });
    };
    userPhotoSave = function() {
      return postJson(YD.conf.userSave, "form#user_photo", function() {
        return redirectToUrl(YD.conf.userHomeUrl);
      });
    };
    return (function() {
      userShow();
      userBarShow();
      $("#user_info").delegate("#user_info_edit", "click", userEdit);
      $("#user_info").delegate("#user_photo_edit", "click", userPhotoEdit);
      $("#user_info").delegate("#user_info_save", "click", userSave);
      return $("#user_info").delegate("#user_photo_save", "click", userPhotoSave);
    })();
  };

  YD.userBar = function() {
    var photos, userInfoAndPhoto, userinfo;
    userinfo = YD.conf.userInfo;
    photos = YD.conf.photos;
    userInfoAndPhoto = $.when($.ajax(userinfo), $.ajax(photos)).then(function(a, b) {
      return _.extend(a[0], b[0]);
    });
    return userInfoAndPhoto.done(function(data) {
      return new EJS({
        url: "" + YD.conf.tplDir + "user_bar.ejs"
      }).update("user_bar", data);
    });
  };

  YD.startDispache = function() {
    var next, updateDateText;
    updateDateText = function(d) {
      var o;
      return o = _.map(d.upcomingExam, function(e) {
        if (e.isTodayExam) {
          e.endTime = "";
          return e.isTodayExam = "今天";
        } else {
          return e.isTodayExam = "";
        }
      });
    };
    next = function() {
      var getExamInfo, onFailure, onSuccess, promise;
      getExamInfo = $.get(YD.conf.getExamInfo);
      promise = getExamInfo.then(function(data) {
        if ("upcomingExam" in data) {
          return _.extend(data, updateDateText(data), {
            hasUpcoming: true
          });
        } else {
          return _.extend(data, {
            hasUpcoming: false
          });
        }
      });
      note(promise);
      onSuccess = function(data) {
        var cssID, ex0up0res1, ex0up1res0, ex0up1res1, ex1up0res0, ex1up0res1, examInfo, hasCurrentExam, hasUpcomingExam, haslatestExamResult, render, userExamState, _ref;
        examInfo = _.snapshot(data);
        hasCurrentExam = "currentExam" in examInfo;
        hasUpcomingExam = "upcomingExam" in examInfo;
        haslatestExamResult = "latestExamResult" in examInfo;
        userExamState = examInfo != null ? (_ref = examInfo.currentExam) != null ? _ref.userExamState : void 0 : void 0;
        ex1up0res0 = hasCurrentExam && !haslatestExamResult;
        ex1up0res1 = hasCurrentExam && haslatestExamResult;
        ex0up1res0 = !hasCurrentExam && hasUpcomingExam && !haslatestExamResult;
        ex0up1res1 = !hasCurrentExam && hasUpcomingExam && haslatestExamResult;
        ex0up0res1 = !hasCurrentExam && !hasUpcomingExam && haslatestExamResult;
        cssID = "front_content";
        render = _.partial(renderLocalData, examInfo, cssID);
        promise.done(doWhen(ex1up0res0, render("start_current.ejs")));
        promise.done(doWhen(ex1up0res1, render("start_scores.ejs")));
        promise.done(doWhen(ex0up1res0, render("start_upcoming.ejs")));
        promise.done(doWhen(ex0up0res1, render("start_scores_with_upcoming.ejs")));
        promise.done(doWhen(ex0up1res1, render("start_scores_with_upcoming.ejs")));
      };
      onFailure = function() {
        return note("链接后台失败。");
      };
      promise.fail(onFailure);
      promise.done(function(data) {
        return note(data);
      });
      promise.done(function(data) {
        return YD.exam = YD.exam || data;
      });
      promise.done(onSuccess);
      return promise.done(function() {
        var shouldRetry;
        shouldRetry = !("currentExam" in YD.exam) && ("upcomingExam" in YD.exam) && _.find(YD.exam.upcomingExam, function(e) {
          return e.isTodayExam;
        });
        if (shouldRetry) {
          note("满足刷新条件，页面将会刷新。 " + (new Date()) + " ");
          return setTimeout(next, 180000);
        }
      });
    };
    return setTimeout(next, 0);
  };

  YD.userLogin = function() {
    return $("form").submit(function(e) {
      var name, notValid, password, yz;
      e.preventDefault();
      name = $("#username").val();
      password = $("#password").val();
      yz = $("#yz").val();
      notValid = hasBlank([name, password, yz]);
      if (notValid) {
        return alertBox("所有输入框都必须填写。");
      } else {
        $("#password").val($.md5(password));
        return postJson(YD.conf.userLogin, "#login", function() {
          return redirectToUrl(YD.conf.siteHomeUrl);
        });
      }
    });
  };

  YD.resetPass = function() {
    return $("form").submit(function(e) {
      var dontMatch, newPass, newPassConfirm, notValid, oldPass;
      e.preventDefault();
      oldPass = $("#old_pass").val();
      newPass = $("#new_pass").val();
      newPassConfirm = $("#new_pass_confirm").val();
      dontMatch = newPass !== newPassConfirm;
      notValid = hasBlank([oldPass, newPass, newPassConfirm]);
      if (notValid) {
        return alertBox("所有输入框都必须填写。");
      } else if (dontMatch) {
        return alertBox("两次输入的新密码不匹配。");
      } else {
        $("#new_pass").val($.md5(newPass));
        $("#old_pass").val($.md5(oldPass));
        $("#new_pass_confirm").val($.md5(newPassConfirm));
        return postJson(YD.conf.userResetPass, "#reset_pass_form", function() {
          return redirectToUrl(YD.conf.userHomeUrl);
        });
      }
    });
  };

}).call(this);
